996.ICU
===

## Vad är "996"?
996 arbetar, ICU väntar.

Ett "996" arbetsschema hänvisar till ett inofficiellt arbetsschema (09.00 - 21.00, 6 dagar i veckan) som har blivit mer populär.
Att betjäna ett företag som uppmuntrar "996" arbetsschema innebär vanligtvis arbete i minst 60 timmar i veckan.

Citat från [Folkrepubliken Kina Arbetsrätt](http://www.china.org.cn/living_in_china/abc/2009-07/15/content_18140508.htm)

**Artikel 36**:
> Staten ska utöva ett arbetstidssystem där arbetstagare ska arbeta högst åtta timmar om dagen och högst 44 timmar i veckan i genomsnitt.

**Artikel 39**:
> Om ett företag inte kan följa bestämmelserna i artiklarna 36 och 38 i denna lag på grund av speciella egenskaper hos dess produktion, kan det följa andra regler om arbete och vila med godkännande av arbetsförvaltningsavdelningar.

**Artikel 41**:
> Arbetsgivaren kan förlänga arbetstiden på grund av produktions- eller företagets behov efter samråd med sin fackförening och medarbetare. Arbetstiden som förlängs ska i allmänhet inte vara längre än en timme om dagen eller högst tre timmar om dagen om sådan förlängning krävs av speciella skäl och under förutsättning att arbetstagarnas fysiska hälsa garanteras . Arbetstiden som ska förlängas får dock inte överstiga 36 timmar om månaden.

**Artikel 43**:
> Arbetsgivaren får inte förlänga arbetstiden för anställda i strid med bestämmelserna i denna lag.

**Artikel 90**:

> Om arbetsgivaren förlänger arbetstiden i strid med bestämmelserna i denna lag kan arbetsförvaltningsavdelningarna ge det en varning, beordra det att göra korrigeringar och kan böja det.

**Artikel 91**:
> (2) Vägran att betala arbetare löneförmåner för att arbeta längre timmar,

## Få mer popularitet och publicitet

I början av 2019 meddelade ett kinesiskt e-handelsföretag, kallat _Youzan_, att företagets årliga parti antog "996" arbetsschema i framtiden. VD för Youzan svarade: "Detta skulle definitivt vara ett bra beslut när vi tittar tillbaka om några år."

I mitten av mars 2019 rapporterades att JD.com började anta "996" eller "995" arbetsschema i några av affärsenheterna. JD.com PR publicerade på deras Maimai (``脉脉 ``, ett kinesiskt företagsnamn för företags sociala nätverk) ":" Vår kultur är att ägna oss åt alla våra hjärtan (för att uppnå affärsmålen) ".

Även om det blir mer publicitet nyligen, är detta arbetsschema ett allmänt känt "hemligt" som praktiseras i många företag i Kina.
## Ersättning och förmåner

Enligt Arbetslagstiftningen förtjänar de anställda som följer "996" arbetsplanen att betala 2.275 gånger av grundlönen. Tyvärr får människor som arbetar under "996" sällan betalt så mycket.

## Var kommer namnet på repo ``996.ICU`` från?

Om du konsekvent följer arbetsschemat "996" löper du risken för att komma in i **I**ntensive **C**are **U**nit.

Utvecklarens liv betyder något.
