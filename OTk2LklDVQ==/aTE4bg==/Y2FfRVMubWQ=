996.ICU
===

## Què és "996"?
Treballant 996, la UCI espera.

Les feines “996” són aquelles feines que segueixen un horari laboral il·legal a la Xina. Ha guanyat popularitat entre les empreses. L’horari comença a les 9 del matí i acaba a les 9 de la nit (12 hores), cada dia durant 6 dies a la setmana.

Treballar en una empresa que fomenta l’horar “996” normalment implica treballar, com a mínim, 72 hores a la setmana.

## Lleis i regulacions

Un horari de treball “996” es considera, juntament a altres legislacions, una violació contundent de la Constitució de la República Popular de la Xina:

### La Constitució de la República Popular de la Xina

#### Capítol II: Article 43:
> _**Qui treballa a la República Popular de la Xina té el dret a descansar.**_  
> L’estat amplia les instal·lacions per el descans i la recuperació dels treballadors i prescriu els horaris laborals i de vacances per a treballadors i personal.

### [Dret laboral de la República Popular de la Xina](http://english.gov.cn/archive/laws_regulations/2014/08/23/content_281474983042473.htm)

#### Capítol I: Article 3:
> Els treballadors tindran el mateix dret a l’ocupació, a l’elecció de l’ocupació, **el dret de remuneració del treball**, **al descans i les vacances**, a la protecció de la salut i seguretat al treball, a formació en habilitats vocacionals, a la seguretat social i benestar, la presentació de conflictes laborals per a la seva solució i altres drets relacionats amb el treball previst per la llei.

#### Chapter IV: Article 36:
> L’Estat ha de practicar un sistema laboral on els treballadors treballin durant **un màxim de vuit hores al dia** i **no pas més de 44 hores setmanals** de mitjana.

#### Capítol IV: Article 39:
> Quan una empresa no pot complir les disposicions de l'article 36 i de l'article 38 d'aquesta Llei a causa de la naturalesa especial de la seva producció, pot aprovar, amb l'aprovació del departament administratiu de treball, altres normes sobre horari i descans.

#### Capítol IV: Article 41:
La unitat de treballador pot estendre les hores de treball necessàries per la seva producció o operació comercial, després de consultar amb el sindicat i els treballadors, però, en general, l’hora de treballar perllongada no pot excedir una hora; si es necessita aquesta extensió per motius especials, sempre que es garanteixi la salut dels treballadors, les hores prorrogades no excediran les tres hores diàries. No obstant això, l’extensió total en un mes no podrà excedir les trenta-sis hores.

#### Capítol IV: Article 43:
> La unitat ocupadora no podrà estendre les hores de treball dels treballadors en violació de les disposicions d'aquesta Llei.

#### Capítol IV: Article 44:
> En qualsevol de les circumstàncies següents, la unitat ocupadora haurà de pagar, segons les normes següents, remuneracions superiors a les establertes per hores dins l’horari laboral habitual:
> 1. Pagar no menys del 150 per cent del salari normal si es disposa una extensió de la jornada laboral;
> 2. Pagar no menys del 200 per cent del salari normal si es treballa en dies de vacances i no es poden organitzar dies de recuperació; o bé
> 3. Pagar no menys del 300 per cent del salari normal si es treballa en dies festius.

#### Capítol XII: Article 90:
> Quan la unitat de contractació, en violació de les disposicions d'aquesta Llei, estén les hores de treball dels treballadors, el departament administratiu de treball li donarà un avís, l'ordre d'efectuar correccions i pot imposar-ne una multa. 

#### Chapter XII: Article 91:
> Quan la unitat de treballador realitzi algun dels següents actes que infringeixin els drets i els interessos legítims dels treballadors, el departament administratiu de treball l'ordenarà que pagui als treballadors una remuneració dels salaris o que compensi les pèrdues econòmiques, i també pot ordenar-li que pagui una indemnització:
> ......  
> __(2) Negar-se a pagar als treballadors una remuneració dels salaris durant les hores de treball esteses;__  
> ......

### [Dret laboral de la República Popular de la Xina](http://english.gov.cn/archive/laws_regulations/2014/08/23/content_281474983042501.htm)

#### Capítol III: Article 31:
> La unitat contractant aplicarà estrictament la norma establerta per a la quota laboral i no obligarà els treballadors a treballar hores extraordinàries ni a fer-ho de forma dissimulada. Si una unitat ocupadora organitza un treballador per treballar hores extraordinàries, haurà de pagar la pròrroga en funció de la normativa pertinent de l'Estat.

#### Capítol V: Article 62:
> La unitat receptora haurà de complir les obligacions següents:  
> ......  
> 3. per fer pagues extraordinàries i bonificacions de rendiment i proporcionar beneficis socials relacionats amb llocs específics;  
> ......  

#### Capítol VII: article 85:
> Quan una unitat ocupadora realitzi un dels actes següents, el departament administratiu de treball l'ordenarà que pagui la remuneració laboral, faci una paga extraordinària o faci una altra compensació financera dins d'un termini; si la remuneració laboral és inferior a la taxa de salari mínim local, haurà de pagar la diferència. Si no realitza aquest pagament a l’expiració del termini, s’ordenarà que pagui una indemnització adicional al treballador a una taxa no inferior al 50%, però no superior al 100% de l’import a pagar:
> 1. No pagar al treballador la seva remuneració laboral a temps i íntegrament tal i com estipula el contracte de treball o el que estipuli l'Estat;
> 2. Pagar una remuneració laboral per sota de la taxa de salari mínim local;
> 3. Organitzar treballs extres, però sense pagar cap hores extraordinàries; o bé
> 4. No abonar la compensació econòmica del treballador d'acord amb les disposicions d'aquesta Llei quan es revoqui o finalitzi un contracte laboral.

### Reglament del Consell d'Estat sobre les hores de treball dels empleats

### Article 3:
> Els treballadors i el personal treballaran 8 hores al dia i 40 hores a la setmana.

### Article 6:
> Cap unitat o individu no podrà estendre les hores de treball dels seus treballadors i personal sense autorització. Quan les hores de treball siguin necessàries per estendre's a efectes de casos especials o de cessió emergents, s’implementaran d’acord amb les disposicions pertinents de l’Estat.

## Guanyant popularitat i publicitat

- A principis de setembre de 2016, nombroses fonts fiables van informar que __*58.com*__  també coneguda com `58同城` (__*NYSE: WUBA*__), una empresa publicitària classificada, va introduir el programa "996" de treball sense pagar hores extraordinàries els caps de setmana. Posteriorment, la companyia va afirmar que el programa només es practicava per gestionar una càrrega de treball addicional durant la temporada alta (setembre i octubre) i que aquest calendari no era obligatori.

- Al gener de 2019, __ * Youzan.com * __ també coneguda com. "有 赞 (__ * HKG: 8083 * __), una empresa de comerç electrònic basada a Hangzhou, va anunciar que la companyia adoptaria el" 996 "programa de treball en la seva convenció anual. Bai Ya, el director general de Youzan, va respondre:

  > "Definitivament, serà una decisió correcta quan mirem enrere en uns quants anys".

- Al març del 2019,__ * JD.com * __ A.K.A. `京东` (__ * NASDAQ: JD * __), una empresa de comerç electrònic important, va començar a adoptar "996" o "995" programes de treball en alguns departaments. El PR de JD va declarar a Maimai (`脉脉`, una plataforma de xarxes socials de negocis xineses),

  > "[La nostra cultura empresarial] és la devoció total de nosaltres mateixos [per assolir els objectius empresarials]".

Recentment, guanyant més publicitat, aquest calendari de treball ha estat un "secret" conegut que es practica a moltes empreses a la Xina.

## Compensació i beneficis

Segons la Llei del treball, els empleats que segueixen l’horari de treball “996” haurien de pagar 2.275 vegades més que el salari bàsic. Malauradament, els empleats poques vegades reben aquest pagament.

## L'origen del nom d'aquest repositori: "996.ICU"

La tolerància de l’horari de treball "996" resultarà inevitablement en arriscar la vostra pròpia salut, la qual cosa pot provocar que acabis a una ICU algun dia (ICU és l’acrònim de Unitat de Cures Intensives en anglès; `6` rima amb` U` en mandarí)

__Les vides dels desenvolupadors són importants .__

