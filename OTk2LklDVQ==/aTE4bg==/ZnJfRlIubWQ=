996.ICU
===

## Qu'est-ce que « 996 » ?

Un emploi « 996 » fait référence à un régime  de travail non officiel (de 9h à 21h, 6 jours par semaine) qui gagne en popularité en Chine.
Travailler pour une entreprise qui encourage le modèle de travail « 996 » signifie en général travailler au moins 60 heures par semaine.

##Lois et règlements pertinents
===
### Constitution de la République populaire de Chine
#### Article 43 du chapitre II
> _**Les travailleurs de la République populaire de Chine ont le droit de se reposer.**_
L'État développe des installations pour le repos et la récupération des travailleurs et stipule le système de temps de travail et de vacances des employés.
### [Loi du travail de la République populaire de Chine](http://www.china.org.cn/living_in_china/abc/2009-07/15/content_18140508.htm)
#### Article 3 du chapitre I
>Les travailleurs ont des droits égaux en matière d'emploi et de choix de carrière, le droit d'obtenir une rémunération pour le travail, 
le droit de faire une pause, le droit à la sécurité du travail et à la protection de la santé, le droit de recevoir une formation professionnelle, le droit à l'assurance sociale et aux prestations, le droit de gérerles conflits de travail et autres droits du travail tels que stipulés par la loi.

#### Article 36 du chapitre IV
>L'État met en œuvre un système d'heures de travail dans lequel la durée du travail des travailleurs ne dépasse pas huit heures par jour et la durée hebdomadaire moyenne du travail ne dépasse pas quarante-quatre heures.

#### Article 39 du chapitre IV
>Les entreprises ne peuvent appliquer les dispositions des articles 36 et 38 de cette loi en raison de leurs caractéristiques de production, approuvé par le département administratif du travail, d'autres méthodes de travail et de repos peuvent être mises en œuvre.

#### Article 41 du chapitre IV
>Pour des raisons de production et de gestion, l’employeur peut prolonger la durée du travail après consultation des syndicats et des ouvriers, généralement pas plus d’une heure par jour; s’il est nécessaire de prolonger la durée du travail pour des raisons particulières, la durée du travail est prolongée dans des conditions assurant la santé des travailleurs. Ne peut excéder trois heures par jour, mais pas plus de trente-six heures par mois.

#### Article 43 du chapitre IV
>L'employeur ne doit pas prolonger la durée du travail des travailleurs en violation des dispositions de la présente loi.

#### Article 44 du chapitre IV
>Dans les cas suivants, l'employeur doit payer des salaires supérieurs aux salaires des travailleurs pendant les heures de travail normales selon les critères suivants:
(1)Organiser les ouvriers pour prolonger les heures de travail, ne payez pas moins de cent cinquante pour cent du salaire;
(2)Organisez le travail de l'ouvrier le jour de repos et ne pouvez vous arranger repos, payer au moins 200% du salaire du salaire;
(3)Organisez le travail d'un jour férié légal pour que les ouvriers travailletes, ne payez pas moins de 300% du salaire

#### Article 90 du chapitre XII
>Si l'employeur enfreint les dispositions de la présente loi et allonge la durée du travail des ouvriers, le service administratif du travail donne un avertissement, corrige l'ordre et inflige une amende.

#### Article 91 du chapitre XII
>Lorsque l'employeur a l'une des violations suivantes des droits et intérêts légitimes du travailleur, le service administratif du travail ordonne le paiement du salaire et de l'indemnisation du travailleur et peut indemniser l'indemnité:
......
(2) refuser de payer l'ouvrier pour augmenter le salaire de la durée du travail;
......
### Loi sur les contrats de travail de la République populaire de Chine

## Gain de popularité

En novembre 2018, [Jumei](https://www.jumei.com) a commencé à adopter le régime de travail « 996 » et à le considérer comme les horaires de travail normaux. La société refuse toute rémunération pour les heures supplémentaires et ne donne aucun jour de congé payé. Même un jour de congé sans solde doit compter 11 heures au lieu de 8 heures. Le samedi, les employés doivent envoyer un e-mail au directeur du département pour approuver le "congé". En janvier 2019, les employés d'un nouveau groupe de Jumei appelé Wangwang ont été forcés à abandonner tous les congés, la durée du service. Ils étaient par ailleurs obligés de transférer le contrat de travail à Jumei, sans quoi ils étaient renvoyés.

Début 2019, une entreprise d'e-commerce chinoise appelée _Youzan_ a déclaré son adoption au régime de travail « 996 » lors de la fête du Nouvel An Chinois de la société. Le PDG de Youzan a annoncé que ce sera certainement une bonne décision si une rétrospective est faite quelques années plus tard.

Mi-mars 2019, il a été signalé que [Jingdong](https://www.jd.com) avait commencé à adopter le mode de fonctionnement « 996 » ou « 995 » dans certaines unités commerciales. Le département des relations publiques chez JD a publié sur son compte maimai (`脉脉`, une plate-forme de réseau social d'entreprises chinoises): « (Notre culture consiste à) nous consacrer de tout notre cœur (à atteindre les objectifs de l'entreprise). »

## Compensation et récompense

Selon la loi du travail en Chine, les employés qui suivent le schéma de travail « 996 » méritent de toucher 2,275 fois leur salaire de base (donc plus du double). Malheureusement, ceux qui sont au régime « 996 » sont rarement payés autant.

## D'où vient le nom du repo `996.ICU` (`996.USI` en français) ?

À cause du mode de travail « 996 », beaucoup de travailleurs risquent de finir dans l'**U**nité de **S**oins **I**ntensifs (**I**ntensive **C**are **U**nit en anglais).

La vie des développeurs compte.
