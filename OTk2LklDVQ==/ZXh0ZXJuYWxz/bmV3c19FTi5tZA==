Related press:
---

* *RadiiChina:* [GitHub Protest Over Chinese Tech Companies’ “996” Culture Goes Viral](https://radiichina.com/github-protest-chinese-tech-996/). 26 March, 2019.
* *Sixth Tone:* [Chinese Developers Protest Overwork on GitHub](https://www.sixthtone.com/news/1003771/chinese-developers-protest-overwork-on-github). 28 March, 2019.
* *Abacus:*  [Follow China’s “996” work hours and you’ll end up in an ICU, says Chinese developer](https://www.abacusnews.com/digital-life/follow-chinas-996-work-hours-and-youll-end-icu-says-chinese-developer/article/3003702). 28 March, 2019.
* *South China Morning Post:* [‘Developers’ lives matter’ – Chinese software engineers use Github to protest against the country’s 996 work schedule](https://www.scmp.com/tech/start-ups/article/3003691/developers-lives-matter-chinese-software-engineers-use-github). 29 March, 2019.
* *TechNode:*  [Briefing: Chinese developers protest ‘996’ in viral Github post](https://technode.com/2019/03/29/briefing-chinese-developers-protest-996-in-viral-github-post/). 29 March, 2019.
* *TechNode Video:*  [Chinese workers react to 996.ICU](https://www.youtube.com/watch?v=kz5PntzynZU). 17 April, 2019.
* *Packt Pub:*  [‘Developers’ lives matter’: Chinese developers protest over the “996 work schedule” on GitHub](https://hub.packtpub.com/developers-lives-matter-chinese-developers-protest-over-the-996-work-schedule-on-github/). 29 March, 2019.
* *Inkstone:*  [China’s tech workers protest brutal work culture with communist jingles](https://www.inkstonenews.com/tech/china-tech-workers-protest-996-working-schedule-github/article/3003800). 29 March, 2019.
* *THE VERGE:* [Chinese developers use GitHub to protest long work hours](https://www.theverge.com/2019/4/2/18291035/chinese-developers-github-protest-long-work-hours). 2 April, 2019.
* *THE VERGE:* [Tencent and Xiaomi may be censoring a GitHub page for airing worker grievances](https://www.theverge.com/2019/4/3/18294030/tencent-xiaomi-china-censorship-browser-block-github-page-worker-grievances). 3 April, 2019.
* *Financial Times:*  [China tech worker protest against long working hours goes viral](https://www.ft.com/content/72754638-55d1-11e9-91f9-b6515a54c5b1). 3 April, 2019.
* *Abacus:*  [Chinese browsers block protest against China’s 996 overtime work culture](https://www.abacusnews.com/digital-life/chinese-browsers-block-protest-against-chinas-996-overtime-work-culture/article/3004543). 3 April, 2019.
* *ZDNet:* [996.ICU : Sur Github, les développeurs chinois donnent de la voix](https://www.zdnet.fr/actualites/996icu-sur-github-les-developpeurs-chinois-donnent-de-la-voix-39882985.htm). 3 April, 2019.
* *Wired:* [How github is helping overworked chinese programmers](https://www.wired.com/story/how-github-helping-overworked-chinese-programmers/). 4 April, 2019.
* *Reuters:* [Rare overtime protest by China tech workers goes viral](https://www.reuters.com/article/us-china-tech-labour/rare-overtime-protest-by-china-tech-workers-goes-viral-idUSKCN1RH12B). 5 April, 2019.
* *Vice:* [Chinese Workers Are Trying to Bake Fair Labor Practices Into Software](https://motherboard.vice.com/en_us/article/mbz84n/chinese-workers-are-trying-to-bake-fair-labor-practices-into-software). 5 April, 2019.
* *Quantz:* [How GitHub became a bulletin board for Chinese tech worker complaints](https://qz.com/1589309/996-icu-github-hosts-chinese-tech-worker-complaints/). 9 April, 2019.
* *AsiaOne:* [Abusive work schedules in China's tech industry under fire](https://www.asiaone.com/world/abusive-work-schedules-chinas-tech-industry-under-fire). 10 April, 2019.
* *National Public Radio:* [GitHub Has Become A Haven For China's Censored Internet Users](https://www.npr.org/2019/04/10/709490855/github-has-become-a-haven-for-chinas-censored-internet-users). 10 April, 2019.
* *Channel NewsAsia:* [Commentary: China's protest against long working hours is so old-fashioned](https://www.channelnewsasia.com/news/commentary/china-996-protest-working-long-hours-old-fashioned-11433878). 11 April, 2019.
* *Fortune:* [China's Workers Are Protesting Tech's Deadly '996' Overtime Culture. Alibaba's Jack Ma Says He Requires It.](http://fortune.com/2019/04/12/china-996-jack-ma/) 12 April, 2019.
* *TechCrunch:* [China’s startup ecosystem is hitting back at demanding working hours](https://techcrunch.com/2019/04/12/china-996/). 12 April, 2019.
* *Reuters:* [Alibaba founder defends overtime work culture as 'huge blessing'](https://www.reuters.com/article/us-china-tech-labour/alibaba-founder-defends-overtime-work-culture-as-huge-blessing-idUSKCN1RO1BC?il=0). 12 April, 2019
* *Reuters:* [China's JD.com boss criticizes 'slackers' as company makes cuts](https://www.reuters.com/article/us-jd-com-labour/chinas-jd-com-boss-criticizes-slackers-as-company-makes-cuts-idUSKCN1RP06D). 13 April, 2019
* *Metro:* [China’s richest man makes his employees work 72 hours a week and calls it a ‘blessing’](https://metro.co.uk/2019/04/13/chinas-richest-man-makes-employees-work-72-hours-week-calls-blessing-9197237/). 13 April, 2019
* *Global Times:* [Company's competitiveness can't rest on 996 overtime culture](http://www.globaltimes.cn/content/1145888.shtml). 14 April, 2019
* *Pandaily:* [Is 996 Truly a Blessing? Let’s Hear What Richard Liu and Jack Ma Have to Say](https://pandaily.com/is-996-truly-a-blessing-lets-hear-what-richard-liu-and-jack-ma-has-to-say/). 14 April, 2019
* *The Economist:* [Office workers in China organise a rare online labour movement](https://www.economist.com/china/2019/04/20/office-workers-in-china-organise-a-rare-online-labour-movement). 17 April, 2019
* *South China Morning Post:* [Inside China Tech: Analysing what’s behind the 996 GitHub protest in China](https://www.scmp.com/podcasts/article/3006888/inside-china-tech-analyzing-whats-behind-996-github-protest-china). 19 April, 2019
* *The New York Times:* [The Richest Man in China Is Wrong. 12-Hour Days Are No ‘Blessing.’](https://www.nytimes.com/2019/04/21/opinion/jack-ma-996.html). 21 April, 2019
* *The Guardian:* [Microsoft workers decry grueling '996' working standard at Chinese tech firms](https://www.theguardian.com/technology/2019/apr/22/microsoft-workers-decry-grueling-996-working-standard-at-chinese-tech-firms). 23 April, 2019
* *Bloomberg:* [Microsoft Workers Criticize Block of GitHub Protest in China](https://www.bloomberg.com/news/articles/2019-04-22/microsoft-workers-criticize-block-of-github-protest-in-china). 22 April, 2019
* *Buzzfeed:* [ Post About China's "996" Workweek Went Viral On GitHub. Now Microsoft Employees Want To Protect It From Censorship](https://www.buzzfeednews.com/article/carolineodonovan/microsoft-petition-996-icu-workweek-china). 22 April, 2019
* *THE VERGE:* [Microsoft workers pressure company to stand by embattled Chinese GitHub repo](https://www.theverge.com/2019/4/22/18511088/microsoft-github-tech-censorship-996-repository-china). 23 April, 2019
* *The Register:* [Fed up with 72-hour, six-day working weeks, IT workers emit cries for help via GitHub repo](https://www.theregister.co.uk/2019/04/23/microsoft_github_china/). 23 April, 2019
* *GIZMODO:* [Microsoft and GitHub Workers Take a Stand Against Grueling, Inhumane '996' Culture in China](https://gizmodo.com/microsoft-and-github-workers-take-a-stand-against-gruel-1834210579). 22 April, 2019
